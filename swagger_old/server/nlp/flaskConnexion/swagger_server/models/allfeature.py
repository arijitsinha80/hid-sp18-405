# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ALLFEATURE(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, tokens: str=None, parsetree: str=None, entities: str=None, tags: str=None):  # noqa: E501
        """ALLFEATURE - a model defined in Swagger

        :param tokens: The tokens of this ALLFEATURE.  # noqa: E501
        :type tokens: str
        :param parsetree: The parsetree of this ALLFEATURE.  # noqa: E501
        :type parsetree: str
        :param entities: The entities of this ALLFEATURE.  # noqa: E501
        :type entities: str
        :param tags: The tags of this ALLFEATURE.  # noqa: E501
        :type tags: str
        """
        self.swagger_types = {
            'tokens': str,
            'parsetree': str,
            'entities': str,
            'tags': str
        }

        self.attribute_map = {
            'tokens': 'tokens',
            'parsetree': 'parsetree',
            'entities': 'entities',
            'tags': 'tags'
        }

        self._tokens = tokens
        self._parsetree = parsetree
        self._entities = entities
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'ALLFEATURE':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ALLFEATURE of this ALLFEATURE.  # noqa: E501
        :rtype: ALLFEATURE
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tokens(self) -> str:
        """Gets the tokens of this ALLFEATURE.


        :return: The tokens of this ALLFEATURE.
        :rtype: str
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens: str):
        """Sets the tokens of this ALLFEATURE.


        :param tokens: The tokens of this ALLFEATURE.
        :type tokens: str
        """
        if tokens is None:
            raise ValueError("Invalid value for `tokens`, must not be `None`")  # noqa: E501

        self._tokens = tokens

    @property
    def parsetree(self) -> str:
        """Gets the parsetree of this ALLFEATURE.


        :return: The parsetree of this ALLFEATURE.
        :rtype: str
        """
        return self._parsetree

    @parsetree.setter
    def parsetree(self, parsetree: str):
        """Sets the parsetree of this ALLFEATURE.


        :param parsetree: The parsetree of this ALLFEATURE.
        :type parsetree: str
        """
        if parsetree is None:
            raise ValueError("Invalid value for `parsetree`, must not be `None`")  # noqa: E501

        self._parsetree = parsetree

    @property
    def entities(self) -> str:
        """Gets the entities of this ALLFEATURE.


        :return: The entities of this ALLFEATURE.
        :rtype: str
        """
        return self._entities

    @entities.setter
    def entities(self, entities: str):
        """Sets the entities of this ALLFEATURE.


        :param entities: The entities of this ALLFEATURE.
        :type entities: str
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")  # noqa: E501

        self._entities = entities

    @property
    def tags(self) -> str:
        """Gets the tags of this ALLFEATURE.


        :return: The tags of this ALLFEATURE.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags: str):
        """Sets the tags of this ALLFEATURE.


        :param tags: The tags of this ALLFEATURE.
        :type tags: str
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags
