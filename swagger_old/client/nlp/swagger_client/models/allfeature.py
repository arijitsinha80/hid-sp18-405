# coding: utf-8

"""
    postag

    A simple service to get some nlp features such as part of speech tagging, lemmatization, consituency parsing etc given an input string as a sentence using swagger -2.0 specification and codegen  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ALLFEATURE(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tokens': 'str',
        'parsetree': 'str',
        'entities': 'str',
        'tags': 'str'
    }

    attribute_map = {
        'tokens': 'tokens',
        'parsetree': 'parsetree',
        'entities': 'entities',
        'tags': 'tags'
    }

    def __init__(self, tokens=None, parsetree=None, entities=None, tags=None):  # noqa: E501
        """ALLFEATURE - a model defined in Swagger"""  # noqa: E501

        self._tokens = None
        self._parsetree = None
        self._entities = None
        self._tags = None
        self.discriminator = None

        self.tokens = tokens
        self.parsetree = parsetree
        self.entities = entities
        self.tags = tags

    @property
    def tokens(self):
        """Gets the tokens of this ALLFEATURE.  # noqa: E501


        :return: The tokens of this ALLFEATURE.  # noqa: E501
        :rtype: str
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this ALLFEATURE.


        :param tokens: The tokens of this ALLFEATURE.  # noqa: E501
        :type: str
        """
        if tokens is None:
            raise ValueError("Invalid value for `tokens`, must not be `None`")  # noqa: E501

        self._tokens = tokens

    @property
    def parsetree(self):
        """Gets the parsetree of this ALLFEATURE.  # noqa: E501


        :return: The parsetree of this ALLFEATURE.  # noqa: E501
        :rtype: str
        """
        return self._parsetree

    @parsetree.setter
    def parsetree(self, parsetree):
        """Sets the parsetree of this ALLFEATURE.


        :param parsetree: The parsetree of this ALLFEATURE.  # noqa: E501
        :type: str
        """
        if parsetree is None:
            raise ValueError("Invalid value for `parsetree`, must not be `None`")  # noqa: E501

        self._parsetree = parsetree

    @property
    def entities(self):
        """Gets the entities of this ALLFEATURE.  # noqa: E501


        :return: The entities of this ALLFEATURE.  # noqa: E501
        :rtype: str
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this ALLFEATURE.


        :param entities: The entities of this ALLFEATURE.  # noqa: E501
        :type: str
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")  # noqa: E501

        self._entities = entities

    @property
    def tags(self):
        """Gets the tags of this ALLFEATURE.  # noqa: E501


        :return: The tags of this ALLFEATURE.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ALLFEATURE.


        :param tags: The tags of this ALLFEATURE.  # noqa: E501
        :type: str
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ALLFEATURE):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
